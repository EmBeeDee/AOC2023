package net.snowtiger.aoc

/**
 * @author mark
 */

object AOC5
{
	val input = "seeds: 79 14 55 13\n\nseed-to-soil map:\n50 98 2\n52 50 48\n\nsoil-to-fertilizer map:\n0 15 37\n37 52 2\n39 0 15\n\nfertilizer-to-water map:\n49 53 8\n0 11 42\n42 0 7\n57 7 4\n\nwater-to-light map:\n88 18 7\n18 25 70\n\nlight-to-temperature map:\n45 77 23\n81 45 19\n68 64 13\n\ntemperature-to-humidity map:\n0 69 1\n1 0 69\n\nhumidity-to-location map:\n60 56 37\n56 93 4"
	val input1 = "seeds: 3943078016 158366385 481035699 103909769 3553279107 15651230 3322093486 189601966 2957349913 359478652 924423181 691197498 2578953067 27362630 124747783 108079254 1992340665 437203822 2681092979 110901631\n\nseed-to-soil map:\n2702707184 1771488746 32408643\n1838704579 89787943 256129587\n3308305769 3945110092 140077818\n3628160213 4264964536 30002760\n3481822196 4118626519 146338017\n2314039806 0 23017018\n2094834166 23017018 66770925\n13529560 2374830476 266694587\n1360948085 2280951884 93878592\n2337056824 1405838386 365650360\n2735115827 1389537903 16300483\n2161605091 1122407194 152434715\n2944685788 3581490111 363619981\n3448383587 4085187910 33438609\n293095451 1923371965 152989927\n555976625 1361056107 28481796\n0 2076361892 13529560\n4055868219 3342391034 239099077\n3658162973 2944685788 397705246\n446085378 2641525063 109891247\n584458421 685760755 436646439\n1647644147 2089891452 191060432\n1528169571 1832460171 90911794\n1619081365 1803897389 28562782\n280224147 1348184803 12871304\n1021104860 345917530 339843225\n1454826677 1274841909 73342894\n\nsoil-to-fertilizer map:\n370579153 1660655546 474809840\n1390384163 3890794774 29044725\n3933903064 3062217622 43562309\n2579648014 2135465386 381757066\n3905615715 3862507425 28287349\n4053211235 382332912 208377334\n3718132574 4107484155 187483141\n3977465373 306587050 75745862\n1866333065 230994048 75593002\n1268904151 2940737610 121480012\n3646057320 3790432171 72075254\n845388993 2517222452 423515158\n2291172026 769577840 288475988\n4261588569 3919839499 33378727\n2112304432 590710246 178867594\n1419428888 1213751369 446904177\n2961405080 3105779931 684652240\n230994048 3967899050 139585105\n2097623608 3953218226 14680824\n1941926067 1058053828 155697541\n\nfertilizer-to-water map:\n0 1551952886 33233684\n961721436 932763195 63696624\n2767354703 3875238046 18117484\n3717194106 2676555200 188038931\n799543557 483022915 162177879\n2428347038 3081230279 28566103\n2872288153 3519235797 218585862\n215425000 1162608123 279396952\n1473270503 411403786 71619129\n2762028477 2930057227 5326226\n3263853515 2169144956 62130350\n3330983617 2935383453 10086546\n2522376237 2231275306 106924906\n2757818051 2103190872 4210426\n3090874015 3187643516 172979500\n2785472187 2530367956 37190043\n1365587214 49710602 107683289\n554985341 330919476 80484310\n3639346972 3109796382 77847134\n1964878739 1442005075 21531118\n2098191120 3737821659 137416387\n1832452033 298110266 32809210\n2456913141 2864594131 65463096\n1025418060 1606654056 340169154\n2277580887 2475812485 29651215\n2416229303 2107401298 12117735\n33233684 176973083 62797441\n157085258 239770524 58339742\n2307232102 2567557999 108997201\n1915168137 0 49710602\n2235607507 3893355530 41973380\n1865261243 1502045992 49906894\n3905233037 3935328910 231121478\n494821952 157393891 19579192\n514401144 996459819 40584197\n4136354515 3360623016 158612781\n3503586692 2945469999 135760280\n635469651 1463536193 38509799\n2629301143 4166450388 128516908\n2822662230 2119519033 49625923\n3325983865 2098191120 4999752\n3341070163 2338200212 137612273\n3478682436 2505463700 24904256\n96031125 1971548655 36328688\n1986409857 1585186570 21467486\n673979450 1037044016 125564107\n1544889632 645200794 287562401\n132359813 1946823210 24725445\n\nwater-to-light map:\n3326310943 1150412752 87200223\n4257088620 4233111242 37878676\n3994159838 4060724644 54228568\n3876001808 4114953212 90976210\n2886658207 1485800780 134153427\n3966978018 4205929422 27181820\n4048388406 3874470488 149045901\n528406865 502600485 237825862\n111547576 1241598488 111964267\n3068561383 1485461466 339314\n3168255879 3056441319 158055064\n3504257503 1453325844 32135622\n2109734789 3372472386 240074722\n3068900697 403245303 99355182\n2027101388 740426347 82633401\n1219093087 1970502974 808008301\n3643122008 1951548756 18954218\n2603944924 279757237 123488066\n766232727 0 10960493\n3712182589 4270989918 1531320\n3536393125 2778511275 106728883\n3482397575 1237612975 3985513\n777193220 1763962961 71462615\n1117452579 1680930659 83032302\n3413511166 3214496383 46428427\n2432743763 2885240158 171201161\n0 3260924810 111547576\n3486383088 1835425576 17874415\n3672475952 3703073187 39706637\n848655835 10960493 268796744\n4197434307 4023516389 37208255\n3459939593 823059748 22457982\n2727432990 1853299991 98248765\n4234642562 4272521238 22446058\n3713713909 3672475952 30597235\n2351588880 1353562755 81154883\n223511843 845517730 304895022\n3744311144 3742779824 131690664\n1200484881 1434717638 18608206\n3020811634 3612547108 47749749\n2349809511 3660296857 1779369\n2825681755 1619954207 60976452\n\nlight-to-temperature map:\n252460180 3718023854 80580651\n3778113118 1519654737 306188725\n333040831 2573805517 96168275\n4084301843 3798604505 210665453\n1694244932 1825843462 379128459\n1487313708 2669973792 206931224\n429209106 2876905016 268167573\n3133421217 3610326681 107697173\n1486370741 3145072589 942967\n697376679 3146015556 464311125\n2152115592 836439718 249469053\n3241118390 214400336 17576418\n214400336 1164650972 38059844\n2073373391 1085908771 78742201\n1161687804 2248952614 324682937\n3258694808 231976754 268511965\n3527206773 1312729085 206925652\n3133251251 2573635551 169966\n2930227394 4091943439 203023857\n2484258126 790765872 45673846\n2639950241 500488719 290277153\n2529931972 1202710816 110018269\n2401584645 4009269958 82673481\n3734132425 2204971921 43980693\n\ntemperature-to-humidity map:\n168091833 268406932 76258451\n3449803430 2843367435 19310453\n2007621581 1615073306 528954706\n1947960540 798304921 59661041\n3469113883 3441273912 247683303\n3980335429 3688957215 155495519\n1382488646 1289756018 231480201\n1613968847 2144028012 203484286\n3030343754 2862677888 310561319\n311459258 1257812898 31943120\n3716797186 4024477040 263538243\n743249314 734822904 63482017\n2843367435 4288015283 6952013\n244350284 201297958 67108974\n806731331 549427536 185395368\n33679712 344665383 134412121\n1817453133 1521236219 93837087\n2850319448 3844452734 180024306\n1193424657 2347512298 189063989\n992126699 0 201297958\n3340905073 3173239207 108898357\n343402378 857965962 399846936\n0 479077504 33679712\n4135830948 3282137564 159136348\n1911290220 512757216 36670320\n\nhumidity-to-location map:\n1586270647 2666237958 31388199\n1639118951 2401662894 243114959\n673413244 1218441073 9004417\n4189219561 4197782169 97185127\n339701505 993997384 224443689\n2088925654 1227445490 16145987\n3048450614 2034241441 196558736\n3245009350 3057456069 37064056\n1990947272 217743214 23964128\n755791330 433456361 436687719\n3750378482 1243591477 29460651\n1347952933 3094520125 238317714\n682417661 3593572644 73373669\n1891967948 3494593320 98979324\n2746577216 1325573050 27089148\n90823161 3346797254 147796066\n238619227 1933159163 101082278\n2884769306 269775053 163681308\n564145194 0 109268050\n2014911400 1273052128 12916400\n2773666364 1295702566 29870484\n0 903174223 90823161\n4286404688 3841991082 8562608\n1617658846 2644777853 21460105\n2714916854 3748178771 31660362\n2275934358 3332837839 13959415\n2027827800 870144080 33030143\n3841991082 4158641967 39140202\n3881131284 3850553690 308088277\n3390548570 2697626157 359829912\n1882233910 1285968528 9734038\n2105071641 2230800177 170862717\n1192479049 1777685279 155473884\n2803536848 3666946313 81232458\n2289893773 1352662198 425023081\n2060857943 241707342 28067711\n3282073406 109268050 108475164"

	def main(args: Array[String]): Unit =
	{
		val lines = input1.split('\n').toList
		val seeds = extractSeedsPt2(lines.head)
		println(seeds.map(_.size).sum)
		println(seeds)
		val maps = extractMaps(lines.tail.tail)
		maps.foreach(println(_))
		println()
		//val locs = seeds.map(s=> mapAll(s, maps))
		//println(locs.min)
		val locs = mapAll(seeds, maps)
		val min = locs.map(_.start).min
		println(min)
	}

	def tokens(s: String): List[String] = s.split(' ').toList.map(_.trim).filter(_.size>0)

	def mapAll(seeds: List[R], maps: List[SeedMap]): List[R] = {
		var xs = seeds
		maps.foreach(m=> {xs = m.map(xs)})
		xs
	}

	def mapAll(seed: Long, maps: List[SeedMap]): Long = {
		var x = seed
		maps.foreach(m=> {x = m.map(x)})
		x
	}

	case class R(start: Long, size: Long) {
		val top = start+size

		def add(delta: Long) = R(start+delta, size)

		def intersect(sourceStart: Long, range: Long): (Option[R], List[R]) ={
			val sourceTop = sourceStart+range
			if (start<sourceTop && top>=sourceStart) {
				val intersectStart = start.max(sourceStart)
				val intersectEnd = top.min(sourceTop)
				var extras = List[R]()
				if (top>sourceTop) extras = R(sourceTop, sourceTop-top)::extras
				if (start<sourceStart) extras = R(start, sourceStart-start)::extras
				(Some(R(intersectStart, intersectEnd-intersectStart)), extras)
			} else {
				(None, List(this))
			}
		}
	}

	case class SeedMapEntry(destStart: Long, sourceStart: Long, range: Long) {
		val delta = destStart-sourceStart

		def applies(source: Long): Boolean = sourceStart<=source && source<sourceStart+range
		def map(source: Long): Long = source+destStart-sourceStart

		def apply(ranges: List[R]): (List[R], List[R]) = {
			var matched = List[R]()
			var unmatched = List[R]()
			ranges.foreach(r => {
				val (intersect, extras) = r.intersect(sourceStart, range)
				if (intersect.nonEmpty) matched = intersect.get.add(delta)::matched
				unmatched++= extras
			})
			(matched, unmatched)
		}
	}

	case class SeedMap(entries: List[SeedMapEntry]) {
		def map(source: Long): Long = {
			entries.find(_.applies(source)).map(_.map(source)).getOrElse(source)
		}

		def map(ranges: List[R]): List[R] = {
			var matches = List[R]()
			var unmatched = ranges
			entries.foreach(e => {
				val (m,u) = e.apply(unmatched)
				matches++= m
				unmatched = u
			})
			matches++unmatched
		}

	}

	def extractSeeds(line: String): List[Long] = {
		val t = tokens(line)
		t.tail.map(_.toLong)
	}

	def extractSeedsPt2(line: String): List[R] = {
		val t = tokens(line)
		val ranges = t.tail.map(_.toLong).grouped(2)
		ranges.map(xs => R(xs.head,xs.tail.head)).toList
	}

	def extractMaps(lines: List[String]): List[SeedMap] = {
		var xs = lines.tail
		var entries = List[SeedMapEntry]()
		while (xs.nonEmpty && xs.head.nonEmpty) {
			val s"$destStart $sourceStart $range" = xs.head
			entries = SeedMapEntry(destStart.toLong, sourceStart.toLong, range.toLong)::entries
			xs = xs.tail
		}
		val sm = SeedMap(entries.reverse)
		if (xs.isEmpty) List(sm) else sm::extractMaps(xs.tail)
	}

}